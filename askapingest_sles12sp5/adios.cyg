##############################################################################
# maali cygnet file for adios
##############################################################################

read -r -d '' MAALI_MODULE_WHATIS << EOF

The Adaptable IO System (ADIOS) provides a simple, flexible way for scientists 
to describe the data in their code that may need to be written, read, or 
processed outside of the running simulation. By providing an external to the 
code XML file describing the various elements, their types, and how you wish 
to process them this run, the routines in the host code (either Fortran or C) 
can transparently change how they process the data.

For more info see https://www.olcf.ornl.gov/center-projects/adios/

EOF

#list extra build options in MAALI_TOOL_BUILD_OPTIONS_AVAIL
# adios can be built with either hdf5 or parallel hdf5
ADIOS_USE_PARALLEL_HDF5=0
ADIOS_USE_MPICH_ABI=0
MAALI_TOOL_BUILD_OPTIONS_AVAIL=("ADIOS_USE_PARALLEL_HDF5=0:1 ADIOS_USE_MPICH_ABI=0:1")

ADIOS_BUILD_CONFIG='--with-zlib --with-bzip2 --with-szip="${MAALI_SZIP_HOME}" CC=mpicc FC=mpif90 '
MAALI_TOOL_PREREQ=" szip "
if [[ ${MAALI_TOOL_MAJOR_VERSION} -ge 2 ]]; then
    MAALI_TOOL_BUILD_PREREQ+=" cmake/3.19.1 "
    ADIOS_BUILD_CONFIG='-DADIOS2_WITH_BZip2=ON -DADIOS2_USE_SZ=AUTO -DADIOS2_USE_MPI=ON CC=mpicc FC=mpif90 '
fi

# parse the build options, would be nice to make this a function 
# the issue currently is the local scope of variables declared 
if [[ ${#MAALI_TOOL_BUILD_OPTIONS[@]} -gt 0 ]]; then
    for i in ${MAALI_TOOL_BUILD_OPTIONS[@]}
    do
        opt=(${i//=/ })
        optname=${opt[0]}
        optval=${opt[1]}
        if [[ "$optname" -eq "ADIOS_USE_PARALLEL_HDF5" ]]; then
            ADIOS_USE_PARALLEL_HDF5=$optval
        fi
        if [[ "$optname" -eq "ADIOS_USE_MPICH_ABI" ]]; then
            ADIOS_USE_MPICH_ABI=$optval
        fi
    done
fi

#update build options if parallel build
if [[ $ADIOS_USE_PARALLEL_HDF5 -eq 1 ]]; then
    ADIOS_HDF5_BUILD_NAME="phdf5"
    if [[ ${MAALI_TOOL_MAJOR_VERSION} -ge 2 ]]; then 
        ADIOS_BUILD_CONFIG+=' -DADIOS2_USE_HDF5=ON -DHDF5_ROOT="${MAALI_HDF5_HOME}" '
    else 
        ADIOS_BUILD_CONFIG+=' --with-phdf5="${MAALI_HDF5_HOME}" '
    fi 
    MAALI_TOOL_PREREQ+=" hdf5/1.10.5-parallel-api-v110 "
else
    ADIOS_HDF5_BUILD_NAME="hdf5"
    if [[ ${MAALI_TOOL_MAJOR_VERSION} -ge 2 ]]; then 
        ADIOS_BUILD_CONFIG+=' -DADIOS2_USE_HDF5=ON -DHDF5_ROOT="${MAALI_HDF5_HOME}" '
    else 
        ADIOS_BUILD_CONFIG+=' --with-hdf5="${MAALI_HDF5_HOME}" '
    fi
    MAALI_TOOL_PREREQ+=" hdf5/1.10.5-c++-noparallel-api-v110 "
fi
if [[ $ADIOS_USE_MPICH_ABI -eq 1 ]]; then
    ADIOS_MPI_BUILD_NAME="mpi-abi-mpich"
    MAALI_TOOL_PREREQ+=" mvapich/2.3b "
else
    ADIOS_MPI_BUILD_NAME="mpi-abi-openmpi"
    MAALI_TOOL_PREREQ+=" openmpi-ucx/4.0.3 "
fi

MAALI_TOOL_BUILD_OPTIONS_SUFFIX="-$ADIOS_HDF5_BUILD_NAME-$ADIOS_MPI_BUILD_NAME"

# specify which compilers we want to build the tool with
#MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_COMPILERS"
MAALI_TOOL_COMPILERS="gcc/8.3.0 gcc/5.5.0"
MAALI_TOOL_CPU_TARGET="$MAALI_DEFAULT_CPU_TARGET"
MAALI_TOOL_CUDA_COMPILERS="$MAALI_DEFAULT_CUDA_COMPILERS"
if [[ $HDF_WITH_PARALLEL -eq 1 ]]; then
  if [[ $MAALI_CUDA_BUILD -eq 1 ]] ; then
    MAALI_TOOL_MPI_COMPILERS="$MAALI_DEFAULT_CUDAMPI_COMPILERS"
  else
    MAALI_TOOL_MPI_COMPILERS="$MAALI_DEFAULT_MPI_COMPILERS"
    if [[ $ADIOS_USE_MPICH_ABI -eq 1 ]]; then
      MAALI_TOOL_MPI_COMPILERS="mvapich/2.3b"
    else  
      MAALI_TOOL_MPI_COMPILERS="openmpi-ucx/4.0.3"
    fi
  fi
fi

# URL to download the source code from
if [[ ${MAALI_TOOL_MAJOR_VERSION} -ge 2 ]]; then
    MAALI_URL="https://github.com/ornladios/ADIOS2/archive/v${MAALI_TOOL_VERSION}.tar.gz"
else 
    MAALI_URL="http://users.nccs.gov/~pnorbert/adios-${MAALI_TOOL_VERSION}.tar.gz"
fi

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tar.bz2"

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION$MAALI_TOOL_SUFFIX"

MAALI_UNPACK_MKDIR=1

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="devel"

# add additional configure options
MAALI_TOOL_CONFIGURE='$ADIOS_BUILD_CONFIG'

# for auto-building module files
MAALI_MODULE_SET_PATH=1
MAALI_MODULE_SET_LD_LIBRARY_PATH=1
MAALI_MODULE_SET_LIBRARY_PATH=1
MAALI_MODULE_SET_MANPATH=1
MAALI_MODULE_SET_CPATH=1
MAALI_MODULE_SET_FPATH=1
MAALI_MODULE_SET_FCPATH=1
MAALI_MODULE_SET_ADIOS_DIR='$MAALI_APP_HOME'

##############################################################################

function maali_pre_build {
  # move the files extracted from tar file to appropriate directory, remove tar made directory

  if [[ ${MAALI_TOOL_MAJOR_VERSION} -ge 2 ]]; then
        rmdir ${MAALI_TOOL_BUILD_DIR}/${MAALI_TOOL_NAME}-${MAALI_TOOL_VERSION}
	mv $MAALI_TOOL_BUILD_DIR/ADIOS2-$MAALI_TOOL_VERSION ${MAALI_TOOL_BUILD_DIR}/${MAALI_TOOL_NAME}-${MAALI_TOOL_VERSION}
  fi
  mv $MAALI_TOOL_BUILD_DIR/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION/* $MAALI_TOOL_BUILD_DIR/
  rm -rf $MAALI_TOOL_BUILD_DIR/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION/
  cd "$MAALI_TOOL_BUILD_DIR"

  
}

##############################################################################

function maali_cmake_build {
  # for tools that use cmake
  MAALI_CMAKE_PATH=$MAALI_TOOL_BUILD_DIR/
  # allows late evaluation
  MAALI_TOOL_CONFIGURE_EVAL=`eval echo "$MAALI_TOOL_CONFIGURE"`

  # cmake likes to build in a director of it's own
  maali_makedir "$MAALI_TOOL_BUILD_DIR/$MAALI_TOOL_NAME-build"
  cd "$MAALI_TOOL_BUILD_DIR/$MAALI_TOOL_NAME-build"

  maali_run "cmake -DCMAKE_INSTALL_PREFIX=$MAALI_INSTALL_DIR $MAALI_TOOL_CONFIGURE_EVAL $MAALI_CMAKE_PATH"
  if [ $DEBUG ]; then
    maali_run "make -j $MAALI_CORES VERBOSE=TRUE"
  else
    maali_run "make -j $MAALI_CORES"
  fi
  maali_run "make install"
}

##############################################################################
