##############################################################################
# maali cygnet file for Ansys
##############################################################################

read -r -d '' MAALI_MODULE_WHATIS << EOF

Ansys publishes engineering analysis software across a range of disciplines
including finite element analysis, structural analysis, computational fluid
dynamics, explicit and implicit methods, and heat transfer.

For further information see http://www.ansys.com/

EOF

# specify which compilers we want to build the tool with
MAALI_TOOL_COMPILERS="binary"

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="apps"

# tool pre-requisites
MAALI_TOOL_PREREQ="intel"

# untar / copy all the installation media into this directory
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/ANSYS-$MAALI_TOOL_VERSION"

if [ "$MAALI_TOOL_VERSION" == "2021R1" ]; then
  ANSYS_VERSION=211
elif [ "$MAALI_TOOL_VERSION" == "2020R1" ]; then
  ANSYS_VERSION=201
elif [ "$MAALI_TOOL_VERSION" == "2019R3" ]; then
  ANSYS_VERSION=195
elif [ "$MAALI_TOOL_VERSION" == "2019R2" ]; then
  ANSYS_VERSION=194
elif [ "$MAALI_TOOL_VERSION" == "2019R1" ]; then
  ANSYS_VERSION=193
else
  ANSYS_VERSION=`echo "$MAALI_TOOL_MAJOR_MINOR_VERSION" | sed -e 's/\.//'`
fi

##############################################################################
# This assumes you've got the installation media as tarballs, e.g. ANSYS-15.0.7_1.tar
function maali_unpack {
  mkdir "$MAALI_TOOL_BUILD_DIR"
  cd "$MAALI_TOOL_BUILD_DIR"
  if [ "$MAALI_SYSTEM_BUILD" != "YES" ]; then
    MAALI_MODULE_RESTRICT_GROUP=`ls -gd "$MAALI_TOOL_BUILD_DIR" | awk '{print $3}'`
  fi
  maali_run 'chmod 750 $MAALI_TOOL_BUILD_DIR'
  maali_run 'chgrp $MAALI_MODULE_RESTRICT_GROUP $MAALI_TOOL_BUILD_DIR'
  maali_run 'tar --group=$MAALI_MODULE_RESTRICT_GROUP -x --strip-components=1 -f $MAALI_SRC/ANSYS-${MAALI_TOOL_VERSION}_1.tar'
  # Using --skip-old-files because some files are repeated in different .tar balls
  maali_run 'tar --group=$MAALI_MODULE_RESTRICT_GROUP -x --skip-old-files --strip-components=1 -f $MAALI_SRC/ANSYS-${MAALI_TOOL_VERSION}_2.tar'
  if [ -f $MAALI_SRC/ANSYS-${MAALI_TOOL_VERSION}_3.tar ]; then
    maali_run 'tar --group=$MAALI_MODULE_RESTRICT_GROUP -x --skip-old-files --strip-components=1 -f $MAALI_SRC/ANSYS-${MAALI_TOOL_VERSION}_3.tar'
  fi
}

##############################################################################

function maali_build {
  mkdir -p "${MAALI_INSTALL_DIR}"
  cd "$MAALI_TOOL_BUILD_DIR"
  maali_run "chmod u+x INSTALL"

  # Ansys installer does its own untarring
  export TAR_OPTIONS="--group=$MAALI_MODULE_RESTRICT_GROUP"

  # Sooo fussy about space
  mkdir "$MAALI_TOOL_BUILD_DIR/tmp"

  #The ANSYS installer does its own unpacking of tgz files, and it seems to not
  #honour group sticky bit.
  #Installing without -<product_flag>, so all products will be installed:
  #(Users' own license will rule their access to specific products, i.e. fluent,cfx,mechanical APDL,autodyn,etc.)
  maali_run "sg $MAALI_MODULE_RESTRICT_GROUP \"./INSTALL -silent -install_dir ${MAALI_INSTALL_DIR} -usetempdir $MAALI_TOOL_BUILD_DIR/tmp\""
##AEG:  mkdir -p $MAALI_INSTALL_DIR/v$ANSYS_VERSION
##AEG:  maali_run "cp -r $MAALI_TOOL_BUILD_DIR/ansys $MAALI_INSTALL_DIR/v$ANSYS_VERSION/"

  if [ "$MAALI_SYSTEM_BUILD" != "YES" ]; then
    MAALI_MODULE_RESTRICT_GROUP=`ls -gd "$MAALI_TOOL_BUILD_DIR" | awk '{print $3}'`
  fi
  maali_run "chmod 750 $MAALI_INSTALL_DIR"
  maali_run "chgrp -R $MAALI_MODULE_RESTRICT_GROUP $MAALI_INSTALL_DIR"
  maali_run "chmod -R g-w,o-rwx $MAALI_INSTALL_DIR"


  #+++++++++++++++++++++++++++++++++++++++++
  # ADAPTING SCRIPTS AND WRAPPERS FOR DIFFERENT PRODUCTS
  #+++++++++++++++++++++++++++++++++++++++++
  #Adapations have only been made for a few products.
  #Further adaptations for other products should be performed as users requests.
  
  #--Adapting scripts and wrappers as "old" installation at Pawsey for "ansys" module:
  fileHere="$MAALI_INSTALL_DIR/v$ANSYS_VERSION/ansys/bin/anssh.ini"
  if [ -f "${fileHere}" ]; then
     echo "YES exists: $fileHere"
     cp ${fileHere} ${fileHere}.original
     sed -i -e 's/distcmd="mpirun"/distcmd="srun "/g' $fileHere
     #KMP_AFFINITY=norespect giving segfaul in omp_get_num_procs
     sed -i -e '/KMP_AFFINITY/ s/norespect/disabled/g' $fileHere
  else
     echo "NOT exists: $fileHere"
  fi

  fileHere="$MAALI_INSTALL_DIR/v$ANSYS_VERSION/ansys/bin/ansys$ANSYS_VERSION"
  if [ -f "${fileHere}" ]; then
     echo "YES exists: $fileHere"
     cp ${fileHere} ${fileHere}.original
     sed -i -e '/distcmd/ s/ -np / -n /g' $fileHere
     sed -i -e '/distcmd/ s/ \${extra_mpi_args} / /g' $fileHere
  else
     echo "NOT exists: $fileHere"
  fi

  #--Adapting scripts and wrappers for product:fluent :
     #Override my_cmdline to use srun rather than mpirun.
  FLUENT_VERSION=$(echo $ANSYS_VERSION | sed 's,\([0-9][0-9]\)\([0-9]\),\1.\2,')
  mpiwrapper="${MAALI_INSTALL_DIR}/v${ANSYS_VERSION}/fluent/fluent${FLUENT_VERSION}.0/multiport/mpi_wrapper/bin/mpirun.fl"
  if [ -f "${mpiwrapper}" ]; then
     echo "YES exists: $mpiwrapper"
     cp ${mpiwrapper} ${mpiwrapper}.original
     sed -i '/# start job/ i my_cmdline=\"srun -n \$FS_NPROC \$FS_CMD\"' ${mpiwrapper}
  else
     echo "NOT exists: $mpiwrapper"
  fi
  
  platformfile="${MAALI_INSTALL_DIR}/v${ANSYS_VERSION}/commonfiles/CPython/3_7/linx64/Release/Ansys/Util/Platform.py"
  if [ -f "${platformfile}" ]; then
     echo "YES exists: $platformfile"
     cp ${platformfile} ${platformfile}.original
     echo "Updating ${platformfile}"
     sed -i -e "s/platform = None/platform = \'linx64\'/g" "${platformfile}"
  else
     echo "NOT exists: $platformfile"
  fi

  #--Adapting scripts and wrappers for product:cfx :
  mpiwrapper="${MAALI_INSTALL_DIR}/v${ANSYS_VERSION}/CFX/tools/multiport/mpi_wrapper/bin/mpirun.fl"
  if [ -f "${mpiwrapper}" ]; then
     echo "YES exists: $mpiwrapper"
     cp ${mpiwrapper} ${mpiwrapper}.original
     sed -i '/# start job/ i my_cmdline=\"srun -n \$FS_NPROC \$FS_CMD\"' ${mpiwrapper}  
  else
     echo "NOT exists: $mpiwrapper"
  fi

  #--Adapting scripts and wrappers for product: :
  #--Adapting scripts and wrappers for product: :
}

##############################################################################

#+++++++++++++++++++++++++++++++++++++++++
# ADAPTING ENVIRONMENT VARIABLES FOR DIFFERENT PRODUCTS
#+++++++++++++++++++++++++++++++++++++++++
#Adapations have only been made for a few products.
#Further adaptations for other products should be performed as users requests.
  
#--General adaptations for all products:
MAALI_MODULE_RESTRICT_GROUP='ANSYS'
MAALI_MODULE_SET_I_MPI_FABRICS='shm:ofi'
MAALI_MODULE_SET_I_MPI_PMI_LIBRARY='/usr/lib64/libpmi.so'
MAALI_MODULE_SET_I_MPI_FALLBACK='no'
MAALI_MODULE_SET_I_MPI_ADJUST_REDUCE='2'
MAALI_MODULE_SET_I_MPI_ADJUST_ALLREDUCE='2'
MAALI_MODULE_SET_I_MPI_ADJUST_BCAST='\1'
MAALI_MODULE_SET_I_MPI_DAPL_SCALABLE_PROGRESS='\1'
MAALI_MODULE_SET_I_MPI_RDMA_TRANSLATION_CACHE='\1'
MAALI_MODULE_SET_I_MPI_DAPL_UD='enable'

GENERAL_PATH="v$ANSYS_VERSION/Framework/bin/Linux64"

#--Adapting variables as "old" installation at Pawsey as "ansys" module:
ANSYS_PATH="v$ANSYS_VERSION/ansys/bin v$ANSYS_VERSION/icemcfd/linux64_amd/bin"
ANSYS_LD_LIBRARY_PATH="v$ANSYS_VERSION/ansys/lib/linx64 v$ANSYS_VERSION/icemcfd/linux64_amd/lib"
MAALI_MODULE_SET_ANSYS_DIR='$MAALI_APP_HOME'
MAALI_MODULE_SET_ANSYS_INSTALLED='$MAALI_APP_HOME'

#--Adapting variables for product:fluent :
FLUENT_PATH="v$ANSYS_VERSION/fluent/bin"
MAALI_MODULE_SET_FLUENT_ARCH='lnamd64'
MAALI_MODULE_SET_ARCHNAME='Linux64'

#--Adapting variables for product:cfx :
CFX_PATH="v$ANSYS_VERSION/CFX/bin"

#--Adapting variables for product: :
#--Adapting variables for product: :
#--Adapting variables for product: :

#FINALLY: Collecting PATHS defined in partial variables
MAALI_MODULE_SET_PATH="$GENERAL_PATH $ANSYS_PATH $FLUENT_PATH $CFX_PATH"
MAALI_MODULE_SET_LD_LIBRARY_PATH="$ANSYS_LD_LIBRARY_PATH"
