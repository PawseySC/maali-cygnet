##############################################################################
# maali cygnet file for lapack
##############################################################################

read -r -d '' MAALI_MODULE_WHATIS << EOF

LAPACK is written in Fortran 90 and provides routines for solving systems of
simultaneous linear equations, least-squares solutions of linear systems of
equations, eigenvalue problems, and singular value problems. The associated
matrix factorizations (LU, Cholesky, QR, SVD, Schur, generalized Schur) are
also provided, as are related computations such as reordering of the Schur
factorizations and estimating condition numbers. Dense and banded matrices are
handled, but not general sparse matrices. In all areas, similar functionality
is provided for real and complex matrices, in both single and double precision.

For further information see http://www.netlib.org/lapack/

EOF

# specify which PrgEnv we want to build the tool with
MAALI_TOOL_CRAY_PRGENV="$MAALI_DEFAULT_CRAY_GCC_PRGENV"

# specify which cpus to target
MAALI_TOOL_CRAY_CPU_TARGET="$MAALI_DEFAULT_CRAY_PES"

# specify which compilers we want to build the tool with
MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_COMPILERS"

if [ $(echo ${MAALI_TOOL_MAJOR_MINOR_VERSION} | cut -d '.' -f2) -lt "8" ]; then
	echo TRUE
# URL to download the source code from
MAALI_URL="http://www.netlib.org/lapack/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tgz"

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tgz"

else 
	echo FALSE
# URL to download the source code from
MAALI_URL="http://www.netlib.org/lapack/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tar.gz"

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tar.gz"
fi

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION"

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="devel"

# tool pre-requisites modules needed to install this new tool/package
MAALI_TOOL_PREREQ=""

# tool build pre-requisites - not added to the module, only needed for building (loaded after MAALI_TOOL_PREREQ)
MAALI_TOOL_BUILD_PREREQ="cmake"

# add additional configure options
MAALI_TOOL_CONFIGURE='-DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_BUILD_TYPE:STRING=Release'

# for auto-building module files
if [ $(echo ${MAALI_TOOL_MAJOR_MINOR_VERSION} | cut -d '.' -f2) -lt "6" ]; then
    echo TRUE
MAALI_MODULE_SET_LD_LIBRARY_PATH='lib'
MAALI_MODULE_SET_LIBRARY_PATH='${MAALI_APP_HOME}/lib'
MAALI_MODULE_SET_PKG_CONFIG_PATH='lib/pkgconfig'
else
    echo FALSE
MAALI_MODULE_SET_LD_LIBRARY_PATH='lib64'
MAALI_MODULE_SET_LIBRARY_PATH='${MAALI_APP_HOME}/lib64'
MAALI_MODULE_SET_PKG_CONFIG_PATH='lib64/pkgconfig'
fi
MAALI_MODULE_SET_LAPACK='$MAALI_APP_HOME'

##############################################################################

function maali_cmake_build {

  #shared library build
  MAALI_TOOL_CONFIGURE_EVAL=`eval echo "$MAALI_TOOL_CONFIGURE"`

  maali_makedir "$MAALI_TOOL_BUILD_DIR/$MAALI_TOOL_NAME-build"
  cd "$MAALI_TOOL_BUILD_DIR/$MAALI_TOOL_NAME-build"

  maali_run "cmake -DCMAKE_INSTALL_PREFIX=$MAALI_INSTALL_DIR $MAALI_TOOL_CONFIGURE $MAALI_CMAKE_PATH"
  if [ $DEBUG ]; then
    maali_run "make -j $MAALI_CORES VERBOSE=TRUE"
  else
    maali_run "make -j $MAALI_CORES"
  fi
  maali_run "make install"


  #static library build
  cd "$MAALI_TOOL_BUILD_DIR"

  cp make.inc.example make.inc
  sed -i 's/^all\:.*/all: lapack_install lib blaslib/' Makefile
  maali_run "make -j $MAALI_CORES"
  cp -p liblapack.a ${MAALI_INSTALL_DIR}/${MAALI_MODULE_SET_LD_LIBRARY_PATH}/liblapack.a
  cp -p librefblas.a ${MAALI_INSTALL_DIR}/${MAALI_MODULE_SET_LD_LIBRARY_PATH}/libblas.a
  maali_run "make clean"

}

