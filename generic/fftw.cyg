##############################################################################
# maali cygnet file for fftw
##############################################################################

read -r -d '' MAALI_MODULE_WHATIS << EOF

FFTW is a C subroutine library for computing the discrete Fourier transform
(DFT) in one or more dimensions, of arbitrary input size, and of both real and
complex data (as well as of even/odd data, i.e. the discrete cosine/sine
transforms or DCT/DST).

For further information see http://www.fftw.org/

EOF

#list extra build options in MAALI_TOOL_BUILD_OPTIONS_AVAIL
FFTW_WITH_MPI=
MAALI_TOOL_BUILD_OPTIONS_AVAIL=("FFTW_WITH_MPI=0:1")

# parse the build options, would be nice to make this a function
# the issue currently is the local scope of variables declared
if [[ ${#MAALI_TOOL_BUILD_OPTIONS[@]} -gt 0 ]]; then
    for i in ${MAALI_TOOL_BUILD_OPTIONS[@]}
    do
        opt=(${i//=/ })
        optname=${opt[0]}
        optval=${opt[1]}
        if [[ "$optname" -eq "FFTW_WITH_MPI" ]]; then
            FFTW_WITH_MPI=$optval
        fi
    done
fi

# specify which compilers we want to build the tool with
MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_COMPILERS"

# URL to download the source code from
MAALI_URL="http://www.fftw.org/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tar.gz"

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tar.gz"

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION"

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="devel"

# for auto-building module files
MAALI_MODULE_SET_PATH=1
MAALI_MODULE_SET_LD_LIBRARY_PATH=1
MAALI_MODULE_SET_LIBRARY_PATH=1
MAALI_MODULE_SET_CPATH=1
MAALI_MODULE_SET_FPATH=1
MAALI_MODULE_SET_FCPATH=1
MAALI_MODULE_SET_MANPATH=1
MAALI_MODULE_SET_PKG_CONFIG_PATH=1
MAALI_MODULE_SET_FFTW_HOME='$MAALI_APP_HOME'
MAALI_MODULE_SET_FFTW_INCLUDE='$MAALI_APP_HOME/include'
MAALI_MODULE_SET_FFTW_LIB='$MAALI_APP_HOME/lib'

#Tell autoconf we're cross-compiling
MAALI_TOOL_CONFIGURE=' --enable-fortran --enable-shared '
FFTW_TYPE_PREFIX=
if [[ $MAALI_TOOL_VERSION == "2."* ]]; then
  FFTW_TYPE_PREFIX=' --enable-type-prefix '
else
  MAALI_TOOL_CONFIGURE+=' --enable-threads --enable-openmp '
fi

FFTW_BUILD_NAME=
#update build options if parallel build
if [[ $FFTW_WITH_MPI -eq 1 ]]; then
    FFTW_BUILD_NAME="-mpi"
    MAALI_TOOL_CONFIGURE+=" --enable-mpi "
    MAALI_TOOL_PREREQ="$MAALI_DEFAULT_MPI"
fi

MAALI_TOOL_BUILD_OPTIONS_SUFFIX="$FFTW_BUILD_NAME"

##############################################################################

function maali_build {

  MAALI_TOOL_CONFIGURE_EVAL=`eval echo "$MAALI_TOOL_CONFIGURE"`

  if [[ $MAALI_COMPILER_NAME == "intel"* ]]; then
    export CC=icc
    export F77=ifort
    if [[ $MAALI_CPU_TARGET == "knl" ]]; then
       export CFLAGS="-fPIC -xMIC-AVX512 -O3"
       export FFLAGS="-fPIC -xMIC-AVX512 -O3"
       MAALI_TOOL_CONFIGURE_EVAL+=' --enable-avx512'
       MAALI_TOOL_CONFIGURE_EVAL+=' --host=x86_64-unknown-linux-gnu'
    elif [[ $MAALI_CPU_TARGET == "broadwell" ]]; then
       export CFLAGS="-fPIC -xCORE-AVX2 -O3"
       export FFLAGS="-fPIC -xCORE-AVX2 -O3"
       MAALI_TOOL_CONFIGURE_EVAL+=' --host=x86_64-unknown-linux-gnu'
    else
       export CFLAGS="-fPIC -O3"
       export FFLAGS="-fPIC -O3"
       MAALI_TOOL_CONFIGURE_EVAL+=' --enable-avx512 '
    fi
  else
    export CC=gcc
    export F77=gfortran
    if [[ $MAALI_CPU_TARGET == "knl" ]]; then
       if [ $COMPILER_VER \< "5" ]; then
         export CFLAGS="-fPIC -mavx2 -O2"
         export FFLAGS="-fPIC -mavx2 -O2"
       else
         export CFLAGS="-fPIC -mavx512f -mavx512cd -O2"
         export FFLAGS="-fPIC -mavx512f -mavx512cd -O2"
       fi
       MAALI_TOOL_CONFIGURE_EVAL+=' --host=x86_64-unknown-linux-gnu'
    elif [[ $MAALI_CPU_TARGET == "broadwell" ]]; then
       export CFLAGS="-fPIC -mavx2 -O3"
       export FFLAGS="-fPIC -mavx2 -O3"
       MAALI_TOOL_CONFIGURE_EVAL+=' --host=x86_64-unknown-linux-gnu'
    else
       export CFLAGS="-fPIC -mavx -O3"
       export FFLAGS="-fPIC -mavx -O3"
    fi
  fi

  cd "$MAALI_TOOL_BUILD_DIR"

  # Making single precision version 
  maali_run "./configure --prefix=$MAALI_INSTALL_DIR $MAALI_TOOL_CONFIGURE_EVAL --enable-float ${FFTW_PREFIX_FLAG} "
  maali_run "make -j $MAALI_CORES"
  maali_run "make install"
  maali_run "make clean"
  # Making double precision version 
  maali_run "./configure --prefix=$MAALI_INSTALL_DIR $MAALI_TOOL_CONFIGURE_EVAL ${FFTW_PREFIX_FLAG} "
  maali_run "make -j $MAALI_CORES"
  maali_run "make install"
  maali_run "make clean"
  
  # if version 2.* then also remake in double precision without prefix
  if [[ $MAALI_TOOL_VERSION == "2."* ]]; then
    # Making double precision version 
    maali_run "./configure --prefix=$MAALI_INSTALL_DIR $MAALI_TOOL_CONFIGURE_EVAL --enable-double"
    maali_run "make -j $MAALI_CORES"
    maali_run "make install"
  fi

}

##############################################################################
