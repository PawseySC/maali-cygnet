##############################################################################
# maali cygnet file for hdf5
##############################################################################

read -r -d '' MAALI_MODULE_WHATIS << EOF

HDF5 is a data model, library, and file format for storing and managing data.
It supports an unlimited variety of datatypes, and is designed for flexible and
efficient I/O and for high volume and complex data. HDF5 is portable and is
extensible, allowing applications to evolve in their use of HDF5. The HDF5
Technology suite includes tools and applications for managing, manipulating,
viewing, and analyzing data in the HDF5 format.

For further information see https://www.hdfgroup.org/hdf5/

EOF

#list extra build options in MAALI_TOOL_BUILD_OPTIONS_AVAIL
HDF_USE_API_VERSION=
HDF_WITH_PARALLEL=
if [[ $MAALI_TOOL_MINOR_VERSION -eq 12 ]]; then
    MAALI_TOOL_BUILD_OPTIONS_AVAIL=("HDF_WITH_PARALLEL=0:1" "HDF_USE_API_VERSION=12:10:6")
elif [[ $MAALI_TOOL_MINOR_VERSION -eq 10 ]]; then
    MAALI_TOOL_BUILD_OPTIONS_AVAIL=("HDF_WITH_PARALLEL=0:1" "HDF_USE_API_VERSION=10:6")
elif [[ $MAALI_TOOL_MINOR_VERSION -lt 10 ]]; then
    MAALI_TOOL_BUILD_OPTIONS_AVAIL=("HDF_WITH_PARALLEL=0:1")
fi

#since HDF5 can be compiled with a variety of options, define API names

# Set config options based on version
# set the API config options
HDF_V12API=""
HDF_V10API=""
HDF_V6API=""
if [[ $MAALI_TOOL_MINOR_VERSION -eq 12 ]]; then
  HDF_V10API=--with-default-api-version=v110
  HDF_V8API=--with-default-api-version=v16
elif [[ $MAALI_TOOL_MINOR_VERSION -eq 10 ]]; then
  HDF_V6API=--with-default-api-version=v16
fi

#default API name
HDF_API_NAME=""
if [[ $MAALI_TOOL_MINOR_VERSION -eq 12 ]]; then
  HDF_API_VERSION_NAME="v112"
elif [[ $MAALI_TOOL_MINOR_VERSION -eq 10 ]]; then
  HDF_API_VERSION_NAME="v110"
elif [[ $MAALI_TOOL_MINOR_VERSION -lt 10 ]]; then
  HDF_API_VERSION_NAME="v16"
fi

#default build state
HDF_BUILD_NAME="c++-noparallel"
HDF_BUILD_CONFIG="--enable-fortran --enable-cxx --with-zlib --with-slib=$MAALI_SZIP_HOME"
MAALI_TOOL_PREREQ="szip/2.1.1"

# parse the build options, would be nice to make this a function 
# the issue currently is the local scope of variables declared 
if [[ ${#MAALI_TOOL_BUILD_OPTIONS[@]} -gt 0 ]]; then
    for i in ${MAALI_TOOL_BUILD_OPTIONS[@]}
    do
        opt=(${i//=/ })
        optname=${opt[0]}
        optval=${opt[1]}
        if [[ "$optname" -eq "HDF_USE_API_VERSION" ]]; then
            HDF_USE_API_VERSION=$optval
        fi
        if [[ "$optname" -eq "HDF5_WITH_PARALLEL" ]]; then
            HDF_WITH_PARALLEL=$optval
        fi
    done
fi

#now set api related build options and name
HDF_API_VERSION_CONFIG=""
if [[ $MAALI_TOOL_MINOR_VERSION -eq 12 ]]; then
    if [[ $HDF_USE_API_VERSION -eq 10 ]]; then
        HDF_API_VERSION_NAME="v110"
        HDF_API_VERSION_CONFIG=$HDF_V10API
    fi
    if [[ $HDF_USE_API_VERSION -eq 6 ]]; then
        HDF_API_VERSION_NAME="v16"
        HDF_API_VERSION_CONFIG=$HDF_V6API
    fi
fi
if [[ $MAALI_TOOL_MINOR_VERSION -eq 10 ]]; then
    if [[ $HDF_USE_API_VERSION -eq 6 ]]; then
        HDF_API_VERSION_NAME="v16"
        HDF_API_VERSION_CONFIG=$HDF_V6API
    fi
fi
HDF_API_NAME="api-$HDF_API_VERSION_NAME"

#update build options if parallel build
if [[ $HDF_WITH_PARALLEL -eq 1 ]]; then
    HDF_BUILD_NAME="parallel"
    HDF_BUILD_CONFIG="--enable-fortran --enable-parallel --with-zlib --with-slib=$MAALI_SZIP_HOME CC=mpicc FC=mpif90"
fi

MAALI_TOOL_BUILD_OPTIONS_SUFFIX="-$HDF_BUILD_NAME-$HDF_API_NAME"

# specify which compilers we want to build the tool with
MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_COMPILERS"
MAALI_TOOL_CPU_TARGET="$MAALI_DEFAULT_CPU_TARGET"
MAALI_TOOL_CUDA_COMPILERS="$MAALI_DEFAULT_CUDA_COMPILERS"
if [[ $HDF_WITH_PARALLEL -eq 1 ]]; then
  if [[ $MAALI_CUDA_BUILD -eq 1 ]] ; then
    MAALI_TOOL_MPI_COMPILERS="$MAALI_DEFAULT_CUDAMPI_COMPILERS"
  else
    MAALI_TOOL_MPI_COMPILERS="$MAALI_DEFAULT_MPI_COMPILERS"
  fi
fi

# URL to download the source code from
MAALI_URL="http://www.hdfgroup.org/ftp/HDF5/releases/$MAALI_TOOL_NAME-$MAALI_TOOL_MAJOR_MINOR_VERSION/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION/src/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tar.bz2"

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tar.bz2"

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION$MAALI_TOOL_SUFFIX"

MAALI_UNPACK_MKDIR=1

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="devel"

# add additional configure options
MAALI_TOOL_CONFIGURE='$HDF_BUILD_CONFIG $HDF_API_VERSION_CONFIG --enable-build-mode=production '

# for auto-building module files
MAALI_MODULE_SET_PATH=1
MAALI_MODULE_SET_LD_LIBRARY_PATH=1
MAALI_MODULE_SET_LIBRARY_PATH=1
MAALI_MODULE_SET_MANPATH=1
MAALI_MODULE_SET_CPATH=1
MAALI_MODULE_SET_FPATH=1
MAALI_MODULE_SET_FCPATH=1
MAALI_MODULE_SET_HDF5_DIR='$MAALI_APP_HOME'

##############################################################################

function maali_pre_build {
  # move the files extracted from tar file to appropriate directory, remove tar made directory
  mv $MAALI_TOOL_BUILD_DIR/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION/* $MAALI_TOOL_BUILD_DIR/
  rmdir $MAALI_TOOL_BUILD_DIR/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION/
  cd "$MAALI_TOOL_BUILD_DIR"
  
}

##############################################################################
