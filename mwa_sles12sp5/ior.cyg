##############################################################################
# maali cygnet file for IOR benchmark -- tested with version 3.0.1
##############################################################################

read -r -d '' MAALI_MODULE_WHATIS << EOF
IOR is an IO benchmark to test I/O performance of the Filesystems.
The current module is built with POSIX and MPIIO support. 

EOF

# specify which compilers we want to build the tool with
MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_COMPILERS"

# URL to download the source code from
MAALI_URL="https://github.com/hpc/ior/archive/${MAALI_TOOL_VERSION}.tar.gz"

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tar.gz"

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/${MAALI_TOOL_NAME}-${MAALI_TOOL_VERSION}"

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="apps"

# tool build pre-requisites - not added to the module, only needed for building (loaded after MAALI_TOOL_PREREQ)
MAALI_TOOL_BUILD_PREREQ=""

# tool pre-requisites 
MAALI_TOOL_PREREQ="$MAALI_DEFAULT_MPI"

# add additional configure options
MAALI_TOOL_CONFIGURE="--with-lustre --with-posix --with-mpiio --prefix=$MAALI_INSTALL_DIR"

# for auto-building module files
MAALI_MODULE_SET_PATH=1
MAALI_MODULE_SET_LD_LIBRARY_PATH=1
MAALI_MODULE_WHATIS=""

##############################################################################
function maali_build {

	cd $MAALI_TOOL_BUILD_DIR
	maali_run "./bootstrap"
	if [ "${COMPILER}" = "gcc" ]; then
		export CC=gcc MPICC=mpicc 
	elif [ "${COMPILER}" = "intel" ]; then
		export CC=icc MPICC=mpicc
	elif [ "${COMPILER}" = "pgi" ]; then
		export CC=pgcc MPICC=mpicc
	fi
	maali_run "./configure CC=mpicc --with-lustre --with-posix --with-mpiio --prefix=$MAALI_INSTALL_DIR CFLAGS=${CFLAGS} CPPFLAGS='-I${MAALI_MVAPICH_HOME}/include' LDFLAGS='-L${MAALI_MVAPICH_HOME}/lib'"
	maali_run "make VERBOSE=1"
	maali_run "make install"
}
