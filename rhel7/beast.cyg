##############################################################################
# maali cygnet file for Beast
##############################################################################

read -r -d '' MAALI_MODULE_WHATIS << EOF

BEAST is a cross-platform program for Bayesian analysis of molecular sequences
using MCMC. It is entirely orientated towards rooted, time-measured phylogenies
inferred using strict or relaxed molecular clock models. It can be used as a
method of reconstructing phylogenies but is also a framework for testing
evolutionary hypotheses without conditioning on a single tree topology. BEAST
uses MCMC to average over tree space, so that each tree is weighted
proportional to its posterior probability. We include a simple to use
user-interface program for setting up standard analyses and a suit of programs
for analysing the results.

For further information see http://beast.bio.ed.ac.uk/ and https://www.beast2.org/

EOF

# specify which compilers we want to build the tool with
MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_COMPILERS"

if [ $MAALI_TOOL_MAJOR_VERSION -ge 2 ]; then 
  # URL to download the source code from
  MAALI_URL="https://github.com/CompEvol/beast2/archive/v$MAALI_TOOL_VERSION.tar.gz"

  # location we are downloading the source code to
  MAALI_DST="$MAALI_SRC/BEAST.v$MAALI_TOOL_VERSION.tar.gz"

  # where the unpacked source code is located
  MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/beast2-$MAALI_TOOL_VERSION"
else
  # URL to download the source code from
  MAALI_URL="https://github.com/beast-dev/beast-mcmc/archive/v$MAALI_TOOL_VERSION.tar.gz"

  # location we are downloading the source code to
  MAALI_DST="$MAALI_SRC/BEASTv$MAALI_TOOL_VERSION.tgz"

  # where the unpacked source code is located
  MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/beast-mcmc-$MAALI_TOOL_VERSION"
fi

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="bio-apps"

# tool pre-requisites
MAALI_TOOL_PREREQ="beagle-lib/2.1.2 java/8u151"

# for auto-building module files
MAALI_MODULE_SET_PATH=1
MAALI_MODULE_SET_LD_LIBRARY_PATH=1
MAALI_MODULE_SET_BEAST_DIR='$MAALI_APP_HOME'
MAALI_MODULE_SET_BEAST_LIB='$MAALI_APP_HOME/lib'

##############################################################################

function maali_build {
  cd "$MAALI_TOOL_BUILD_DIR"

  if [ $MAALI_TOOL_MAJOR_VERSION -lt 2 ]; then 
    cd native

    # remove object files
    rm -rf $MAALI_TOOL_BUILD_DIR/native/*.o

    if [ "$MAALI_COMPILER_NAME" == "intel" ]; then
      maali_run "make -f Makefile.icc"
    elif [ "$MAALI_COMPILER_NAME" == "gcc" ]; then
      maali_run "make -f Makefile.linux"
    else
      echo "Only gcc and intel are supported"
      exit 1;
    fi
    maali_run "mv libNucleotideLikelihoodCore.so ../lib/"
    maali_run "rm -f ../lib/libNucleotideLikelihoodCore32.so"

    cd ..
  fi

  maali_makedir "$MAALI_INSTALL_DIR/"

  if [ $MAALI_TOOL_MAJOR_VERSION -lt 2 ]; then 
    maali_run "mv $MAALI_TOOL_BUILD_DIR/release/Linux/scripts $MAALI_INSTALL_DIR/bin"
    maali_run "mv $MAALI_TOOL_BUILD_DIR/release/Linux/lib $MAALI_INSTALL_DIR/lib"
    maali_run "mv doc examples $MAALI_INSTALL_DIR"
    cat <<EOF >"$MAALI_INSTALL_DIR/bin/beast"
#!/bin/bash

java -Xms64m -Xmx1024m -Djava.library.path="\$BEAST_LIB:\$BEAGLE_LIB_DIR/lib" -cp "\$BEAST_LIB/beast.jar:\$BEAST_LIB/beast-beagle.jar" dr.app.beast.BeastMain \$*
EOF
  else
    maali_run "mv examples lib $MAALI_INSTALL_DIR"
    maali_run " mv release/Linux/bin $MAALI_INSTALL_DIR"

    cat <<EOF >"$MAALI_INSTALL_DIR/bin/beast"
#!/bin/bash

java -Xms256m -Xmx1024m -Djava.library.path="\$BEAST_LIB" -cp "\$BEAST_LIB/beast.jar" beast.app.beastapp.BeastMain $*
EOF
  fi

  maali_run "chmod 755 $MAALI_INSTALL_DIR/bin/beast"

}

##############################################################################
