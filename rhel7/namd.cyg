##############################################################################
# maali cygnet file for NAMD
##############################################################################

read -r -d '' MAALI_MODULE_WHATIS << EOF

NAMD, recipient of a 2002 Gordon Bell Award and a 2012 Sidney Fernbach Award,
is a parallel molecular dynamics code designed for high-performance simulation
of large biomolecular systems. Based on Charm++ parallel objects, NAMD scales
to hundreds of cores for typical simulations and beyond 500,000 cores for the
largest simulations. NAMD uses the popular molecular graphics program VMD for
simulation setup and trajectory analysis, but is also file-compatible with
AMBER, CHARMM, and X-PLOR. NAMD is distributed free of charge with source code.

For further information see http://www.ks.uiuc.edu/Research/namd/

EOF

# specify wchich compilers/architecture to use for the GPU build

if [[ ${MAALI_CUDA_BUILD} -eq "1" && ${MAALI_POWER} -eq "0" ]]; then
  MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_INTEL_COMPILERS"
  MAALI_TOOL_CPU_TARGET="$MAALI_DEFAULT_TOOL_CPU_TARGET"
else
  MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_IBM_COMPILERS"
  MAALI_TOOL_CPU_TARGET="$MAALI_TOOL_CPU_TARGET"
fi

# specify which cuda versions we want to build the tool with
MAALI_TOOL_CUDA_COMPILERS="$MAALI_DEFAULT_CUDA_COMPILERS"

# URL to download the source code from
MAALI_URL=""

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/NAMD_Git-${MAALI_TOOL_VERSION}_Source.tar.gz"

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/NAMD_Git-""$MAALI_TOOL_VERSION""_Source"

MAALI_TOOL_PREREQ="fftw/3.3.8 tcl/8.6.8 spectrum_mpi/10.1.0 cuda/9.2"
#  cuda/9.1

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="apps"

# for auto-building module files
MAALI_MODULE_SET_PATH=1

# supports building CUDA version
MAALI_CUDA_SUPPORT=1

##############################################################################

function maali_build {

  cd "$MAALI_TOOL_BUILD_DIR"

  CHARM_VERSION=`ls charm*.tar | sed "s/.*-\(.*\)\.[a-zA-Z0-9]\{3\}$/\1/"`

  maali_run 'tar xf charm-$CHARM_VERSION.tar'

  if [ ${MAALI_POWER} -eq "0" ]; then
    echo "no power found"
#    cd "charm-$CHARM_VERSION

#    maali_run './build charm++ verbs-linux-x86_64 icc  smp  -j8  --with-production'
#    echo "Charm built"
    
#    cd "$MAALI_TOOL_BUILD_DIR"
    # download the precompiled tcl binaries from namd site
#    maali_run 'wget http://www.ks.uiuc.edu/Research/namd/libraries/tcl8.5.9-linux-x86_64.tar.gz'
#    maali_run 'wget http://www.ks.uiuc.edu/Research/namd/libraries/tcl8.5.9-linux-x86_64-threaded.tar.gz'
#    maali_run 'tar xzf tcl8.5.9-linux-x86_64.tar.gz'
#    maali_run 'tar xzf tcl8.5.9-linux-x86_64-threaded.tar.gz'
#    maali_run 'mv tcl8.5.9-linux-x86_64 tcl'
#    maali_run 'mv tcl8.5.9-linux-x86_64-threaded tcl-threaded'
#    echo "TCL downloaded and unpacked"
 
#    if [ $MAALI_CUDA_BUILD -eq "1" ]; then
#      maali_run './config Linux-x86_64-icc --charm-arch verbs-linux-x86_64-smp-icc --with-fftw3 --with-tcl --fftw-prefix $FFTW_HOME --with-cuda --cuda-prefix $NVIDIA_CUDA_HOME'

#    else # the default using icc without cuda
#      maali_run './config Linux-x86_64-icc --charm-arch verbs-linux-x86_64-smp-icc --with-fftw3 --with-tcl --fftw-prefix $FFTW_HOME '
#    fi

#    cd Linux-x86_64-icc
#    maali_run 'make -C -j8'

#    cd "$MAALI_TOOL_BUILD_DIR"
#    ln -s Linux-x86_64-icc bin
#    # THIS IS FOR SLURM  might need to add test for scheduler type in future.
#    cat <<EOF >srun_launcher
##!/bin/csh -f
#  shift
#  exec srun --export=ALL -n $* 
#EOF
#    chmod +x srun_launcher
#    maali_run 'mkdir -p $MAALI_INSTALL_DIR'
#    maali_run 'cp -R $MAALI_TOOL_BUILD_DIR/* $MAALI_INSTALL_DIR'
#    maali_run 'cp srun_launcher ${MAALI_INSTALL_DIR}/bin'

  else  
    # defaults to building on IBM power
    echo Found Power
    cd "charm-$CHARM_VERSION"
   
    # Need to patch for IBM-power systems!
    # MAALI_FILES_PATH is  $HOME/.maali/$MAALI_OS/cygnet_files 
    maali_run "cp $MAALI_FILES_PATH/namd_with_pami_patch/ibm.* ."
    maali_run "source ibm.env"
    export CHARMBASE=`pwd`
    export PAMI_INC=$CHARMBASE/ibm_includes/pami
    export LIBCOLL_INC=$CHARMBASE/ibm_includes/libcoll
    export SMPI_LIB_PATH=$MPIROOT/lib
    echo ""
    echo " ####   CHARMBASE IS $CHARMBASE"
    echo " "
    maali_run "sed -i 's/lcollectives_pami/lcollectives/g' src/arch/pami-linux-ppc64le/conv-mach.sh"
    maali_run "cp $MAALI_FILES_PATH/namd_with_pami_patch/ibm_includes.tgz ."
#    maali_run "patch -b -p0 < ibm.diffs"
    maali_run "tar -zxvf ibm_includes.tgz" 
    maali_run "cp $MAALI_FILES_PATH/namd_with_pami_patch/Linux-* $MAALI_TOOL_BUILD_DIR/arch/."
    
    maali_run './build charm++ pami-linux-ppc64le smp -j8 --with-production'

    echo "Charm built"
 
    cd "$MAALI_TOOL_BUILD_DIR"
    #UPDATE/MODIFY/PATCH configuration files 
#    echo "need tcl/8.6.8, fftw/3.3.8 and cuda/9.1 modules" 
    # patch Linux-POWER.xlC to cut :fltint fix warning
#    maali_run "sed -i 's/:fltint//g'        arch/Linux-POWER-xlC.arch"
    # patch Linux-POWER.cuda9 to find cuda 9.1
    maali_run "sed -i 's/^CUDADIR=.*$/CUDADIR=\$\(CUDA_DIR\)/g'        arch/Linux-POWER.cuda9"
    
    # patch Linux-POWER.tcl to find tcl 8.6.8
    maali_run "sed -i 's/^TCLDIR=.*$/TCLDIR=\$(MAALI_TCL_HOME\)/g'     arch/Linux-POWER.tcl" 
    maali_run "sed -i 's/-ltcl[^ ]*/-ltcl8.6 -lz/g'                    arch/Linux-POWER.tcl"
    
    # patch Linux-POWER.fftw3 to fftw 3.3.8
    maali_run "sed -i 's/^FFTDIR=.*$/FFTWDIR=\$\(MAALI_FFTW_HOME\)/g' arch/Linux-POWER.fftw3"

    echo " config namd "    
    maali_run './config Linux-POWER-xlC --charm-arch pami-linux-ppc64le-smp --with-fftw3 --fftw-prefix ${MAALI_FFTW_HOME} --with-tcl --tcl-prefix ${MAALI_TCL_HOME} --with-memopt --with-cuda --cuda-prefix ${CUDA_HOME}'
#  --with-cuda --cuda-prefix ${CUDA_HOME}

    echo " make namd "
    maali_run "sed -i 's/CXX/CC/g' Make.depends"
    maali_run "sed -i 's/EXTRALINKLIBS\=/EXTRALINKLIBS\=\-lmass/g' Makefile"
    cd Linux-POWER-xlC
     
    maali_run 'make -j 8 namd2'
    
#    cd "${MAALI_TOOL_BUILD_DIR}"
#    ln -s Linux-POWER-xlC bin

#    maali_run 'mkdir -p $MAALI_INSTALL_DIR'
#    maali_run 'cp -R $MAALI_TOOL_BUILD_DIR/* $MAALI_INSTALL_DIR'
  fi
}

##############################################################################
