##############################################################################
# maali cygnet file for samtools
##############################################################################

read -r -d '' MAALI_MODULE_WHATIS << EOF

SAM (Sequence Alignment/Map) format is a generic format for storing large nucleotide sequence alignments.

SAM Tools provide various utilities for manipulating alignments in the SAM
format, including sorting, merging, indexing and generating alignments in a
per-position format.

For further information see http://samtools.sourceforge.net/

EOF

# specify which compilers we want to build the tool with
MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_COMPILERS"

# URL to download the source code from
if [[ $(echo "if (${MAALI_TOOL_MAJOR_VERSION} >= 1) 1 else 0" | bc) -eq 1 ]]; then
  if [ "$MAALI_TOOL_VERSION" == "1.1" ]; then
    MAALI_URL="https://github.com/samtools/$MAALI_TOOL_NAME/archive/$MAALI_TOOL_VERSION.tar.gz"
  else
    MAALI_URL="https://github.com/samtools/$MAALI_TOOL_NAME/releases/download/$MAALI_TOOL_VERSION/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tar.bz2"
  fi
else
  MAALI_URL="http://sourceforge.net/projects/samtools/files/$MAALI_TOOL_NAME/$MAALI_TOOL_VERSION/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tar.bz2/download"
fi

# location we are downloading the source code to
if [ "$MAALI_TOOL_VERSION" == "1.1" ]; then
  MAALI_DST="$MAALI_SRC/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tar.gz"
else
  MAALI_DST="$MAALI_SRC/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tar.bz2"
fi

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION"

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="bio-apps"

# tool pre-requisites modules needed to install this new tool/package
if [[ $(echo "if (${MAALI_TOOL_MAJOR_VERSION} >= 1) 1 else 0" | bc) -eq 1 ]]; then
  MINOR_VERSION=$(echo $MAALI_TOOL_VERSION | cut -d . -f 2)

  if [ "$MINOR_VERSION" == "2" ]; then
    MAALI_TOOL_PREREQ="htslib/1.2.1"
  else
    MAALI_TOOL_PREREQ="htslib/$MAALI_TOOL_VERSION"
  fi

fi

PREREQ_HTSLIB_VERSION=`echo $MAALI_HTSLIB_HOME | rev | cut -d "/" -f 1 | rev`

# tool build pre-requisites - not added to the module, only needed for building (loaded after MAALI_TOOL_PREREQ)
MAALI_TOOL_BUILD_PREREQ=""

# for auto-building module files
MAALI_MODULE_SET_PATH=1
MAALI_MODULE_SET_LD_LIBRARY_PATH=1
MAALI_MODULE_SET_BAM_ROOT='$MAALI_APP_HOME'

##############################################################################

function maali_build {
  cd "$MAALI_TOOL_BUILD_DIR"

  # fix for SLES11
  sed -i -e 's/lcurses/lncurses/g' Makefile

  cp Makefile Makefile.backup

  if [[ $(echo "if (${MAALI_TOOL_MAJOR_VERSION} >= 1) 1 else 0" | bc) -eq 1 ]]; then
      if [ "$MAALI_TOOL_VERSION" != "1.1" ]; then
        # this should already be installed
        rm -r htslib*
      fi

      if [ "$MAALI_COMPILER_NAME" == "intel" ]; then
          sed -i -e 's!gcc!icc!g' Makefile
      fi

      if [ "$MAALI_TOOL_VERSION" == "1.1" ]; then
        cp Makefile Makefile.backup
        sed -i -e 's!HTSDIR = ../htslib!HTSDIR = '$MAALI_HTSLIB_HOME'/include!g' Makefile
        sed -i -e 's!include $(HTSDIR)/htslib.mk!#include $(HTSDIR)/htslib.mk!g' Makefile
        sed -i -e 's!include $(HTSDIR)/htslib.mk!#include '$MAALI_HTSLIB_HOME'/htslib.mk!g' Makefile
	sed -i -e 's!HTSLIB = $(HTSDIR)/libhts.a!HTSLIB = '$MAALI_HTSLIB_HOME'/lib/libhts.a!g' Makefile
        sed -i -e 's!BGZIP  = $(HTSDIR)/bgzip!BGZIP  = '$MAALI_HTSLIB_HOME'/bin/bgzip!g' Makefile
      elif [ "$MAALI_TOOL_VERSION" == "1.2" ]; then
        cp Makefile Makefile.backup
        sed -i -e 's!HTSDIR = htslib-1.2.1!HTSDIR = '$MAALI_HTSLIB_HOME'/include!g' Makefile
        sed -i -e 's!include $(HTSDIR)/htslib.mk!#include $(HTSDIR)/htslib.mk!g' Makefile
        sed -i -e 's!HTSLIB = $(HTSDIR)/!HTSLIB = '$MAALI_HTSLIB_HOME'/lib/!g' Makefile
        sed -i -e 's!BGZIP  = $(HTSDIR)/bgzip!BGZIP  = '$MAALI_HTSLIB_HOME'/bin/bgzip!g' Makefile
      else
	# As of 1.3 it now has a configure
	./configure --with-htslib=$MAALI_HTSLIB_HOME
      fi

      maali_run "make"
      maali_run "make prefix=$MAALI_INSTALL_DIR install"
      
      # as of 1.2 / 1.3 it doesn't copy the libpam.a
      # Missing Header files
      mkdir -p ${MAALI_INSTALL_DIR}/lib
      cp libbam.a ${MAALI_INSTALL_DIR}/lib
      mkdir -p ${MAALI_INSTALL_DIR}/include/bam
      cp *.h ${MAALI_INSTALL_DIR}/include/bam	

  else
      if [ "$MAALI_COMPILER_NAME" == "intel" ]; then
          sed -i -e 's!gcc!icc!g' Makefile
          sed -i -e 's!gcc!icc!g' bcftools/Makefile
      fi

      maali_run "make"
      maali_makedir "$MAALI_INSTALL_DIR/bin"
      maali_run "install -m 755 samtools $MAALI_INSTALL_DIR/bin"
    
      if [[ $(echo "if (${MAALI_TOOL_MAJOR_MINOR_VERSION} >= 0.1) 1 else 0" | bc) -eq 1 ]]; then
          MAALI_TOOL_BUGFIX_VERSION=`echo $MAALI_TOOL_VERSION | cut -d '.' -f 3`
          if [[ $(echo "if (${MAALI_TOOL_BUGFIX_VERSION} > 8) 1 else 0" | bc) -eq 1 ]]; then
              # Have To build bcftools seperately
              cd "$MAALI_TOOL_BUILD_DIR/bcftools"
              maali_run "make clean"
              maali_run "make"
              maali_run "install -m 755 bcftools $MAALI_INSTALL_DIR/bin"
              maali_run "install -m 755 vcfutils.pl $MAALI_INSTALL_DIR/bin"
              cd "$MAALI_TOOL_BUILD_DIR"
          fi
        fi

        maali_makedir "$MAALI_INSTALL_DIR/lib"
        maali_run "cp libbam.a $MAALI_INSTALL_DIR/lib"
        maali_makedir "$MAALI_INSTALL_DIR/include/bam"
        maali_run "cp *.h $MAALI_INSTALL_DIR/include/bam"
    fi

    #Make a copy of tbe Code Base needed for other things like Augusta Auxillary tools which complians
    #samtools / libhts / bcftools are interlinked badly
    mkdir -p ${MAALI_INSTALL_DIR}/src
    cp -R ${MAALI_TOOL_BUILD_DIR}/* ${MAALI_INSTALL_DIR}/src/
}

##############################################################################
