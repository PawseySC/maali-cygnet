##############################################################################
# maali cygnet file for LAMMPS
##############################################################################

# specify which compilers we want to build the tool with
MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_COMPILERS"

# URL to download the source code from 
MAALI_URL="http://lammps.sandia.gov/tars/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tar.gz"

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tar.gz"

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION"

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="apps"

# tool pre-requisites modules needed to install this new tool/package
MAALI_TOOL_PREREQ="openmpi fftw-parallel/3.3.5"

# for auto-building module files
MAALI_MODULE_SET_LAMMPS_ROOT='$MAALI_APP_HOME'
MAALI_MODULE_SET_PATH='src'
MAALI_MODULE_WHATIS="LAMMPS is a classical molecular dynamics code, and an acronym for Large-scale Atomic/Molecular Massively Parallel Simulator. LAMMPS has potentials for soft materials (biomolecules, polymers) and solid-state materials (metals, semiconductors) and coarse-grained or mesoscopic systems."

##############################################################################

function maali_build {

  MAALI_LOCAL_BUILD_DIR="$MAALI_APPS_DIR/$COMPILER/$COMPILER_VER/$MAALI_TOOL_NAME"

  mv $MAALI_TOOL_BUILD_DIR/* $MAALI_INSTALL_DIR

# create a machine file for nectar 
#
  cat <<\EOF >>${MAALI_INSTALL_DIR}/src/MAKE/MACHINES/Makefile.nectar
# ubuntu = Ubuntu Linux box, g++, openmpi, FFTW3

# you have to install the packages g++, mpi-default-bin, mpi-default-dev,
# libfftw3-dev, libjpeg-dev and libpng12-dev to compile LAMMPS with this
# makefile

SHELL = /bin/sh
# ---------------------------------------------------------------------
# compiler/linker settings
# specify flags and libraries needed for your compiler

CC =		mpic++
CCFLAGS =	-O3 -funroll-loops -fopenmp# -Wunused
SHFLAGS =	-fPIC
DEPFLAGS =	-M

LINK =		mpic++
LINKFLAGS =	-O3 -fopenmp
LIB = 
SIZE =		size

ARCHIVE =	ar
ARFLAGS =	-rc
SHLIBFLAGS =	-shared

# ---------------------------------------------------------------------
# LAMMPS-specific settings, all OPTIONAL
# specify settings for LAMMPS features you will use
# if you change any -D setting, do full re-compile after "make clean"

# LAMMPS ifdef settings
# see possible settings in Section 2.2 (step 4) of manual

LMP_INC = "-DLAMMPS_JPEG -DLAMMPS_PNG -DLAMMPS_FFMPEG -DLAMMPS_GZIP -DLAMMPS_MEMALIGN=64 -DPACK_ARRAY"
 
# MPI library
# see discussion in Section 2.2 (step 5) of manual
# MPI wrapper compiler/linker can provide this info
# can point to dummy MPI library in src/STUBS as in Makefile.serial
# use -D MPICH and OMPI settings in INC to avoid C++ lib conflicts
# INC = path for mpi.h, MPI compiler settings
# PATH = path for MPI library
# LIB = name of MPI library

MPI_INC = '-DMPICH_SKIP_MPICXX -DOMPI_SKIP_MPICXX=1'
MPI_PATH = 
MPI_LIB =

# FFT library
# see discussion in Section 2.2 (step 6) of manaul
# can be left blank to use provided KISS FFT library
# INC = -DFFT setting, e.g. -DFFT_FFTW, FFT compiler settings
# PATH = path for FFT library
# LIB = name of FFT library

FFT_INC = "-DFFT_FFTW3 -DFFT_SINGLE -I${FFTW_INCLUDE}"
FFT_LIB = -L${FFTW_HOME}/lib -lfftw3
FFT_PATH = 

# JPEG and/or PNG library
# see discussion in Section 2.2 (step 7) of manual
# only needed if -DLAMMPS_JPEG or -DLAMMPS_PNG listed with LMP_INC
# INC = path(s) for jpeglib.h and/or png.h
# PATH = path(s) for JPEG library and/or PNG library
# LIB = name(s) of JPEG library and/or PNG library

JPG_INC = -I/usr/include
JPG_LIB = -L/usr/lib -ljpeg -lpng12

# ---------------------------------------------------------------------
# build rules and dependencies
# do not edit this section

include	Makefile.package.settings
include	Makefile.package

EXTRA_INC = $(LMP_INC) $(PKG_INC) $(MPI_INC) $(FFT_INC) $(JPG_INC) $(PKG_SYSINC)
EXTRA_PATH = $(PKG_PATH) $(MPI_PATH) $(FFT_PATH) $(JPG_PATH) $(PKG_SYSPATH)
EXTRA_LIB = $(PKG_LIB) $(MPI_LIB) $(FFT_LIB) $(JPG_LIB) $(PKG_SYSLIB)
EXTRA_CPP_DEPENDS = $(PKG_CPP_DEPENDS)
EXTRA_LINK_DEPENDS = $(PKG_LINK_DEPENDS)

# Path to src files

vpath %.cpp ..
vpath %.h ..

# Link target

$(EXE):	$(OBJ) $(EXTRA_LINK_DEPENDS)
	$(LINK) $(LINKFLAGS) $(EXTRA_PATH) $(OBJ) $(EXTRA_LIB) $(LIB) -o $(EXE)
	$(SIZE) $(EXE)

# Library targets

lib:	$(OBJ) $(EXTRA_LINK_DEPENDS)
	$(ARCHIVE) $(ARFLAGS) $(EXE) $(OBJ)

shlib:	$(OBJ) $(EXTRA_LINK_DEPENDS)
	$(CC) $(CCFLAGS) $(SHFLAGS) $(SHLIBFLAGS) $(EXTRA_PATH) -o $(EXE) \
        $(OBJ) $(EXTRA_LIB) $(LIB)

# Compilation rules

%.o:%.cpp $(EXTRA_CPP_DEPENDS)
	$(CC) $(CCFLAGS) $(SHFLAGS) $(EXTRA_INC) -c $<

%.d:%.cpp $(EXTRA_CPP_DEPENDS)
	$(CC) $(CCFLAGS) $(EXTRA_INC) $(DEPFLAGS) $< > $@

%.o:%.cu $(EXTRA_CPP_DEPENDS)
	$(CC) $(CCFLAGS) $(SHFLAGS) $(EXTRA_INC) -c $<

# Individual dependencies

depend : fastdep.exe $(SRC)
	@./fastdep.exe $(EXTRA_INC) -- $^ > .depend || exit 1

fastdep.exe: ../DEPEND/fastdep.c
	cc -O -o $@ $<

sinclude .depend

EOF

####
# Configure and Make 

  cd "$MAALI_INSTALL_DIR/src"	

  maali_wiki " ... make packages" 
#  maali_run "make clean-all"
  maali_run "make -e -j $MAALI_CORES nectar"

# compile the standard packages
  maali_run "make yes-standard"

  maali_run "make yes-user-omp"
#  maali_run "make mpi"


# compile additional packages
  cd "$MAALI_INSTALL_DIR/lib/reax"
  make -f Makefile.gfortran  
  cd "$MAALI_INSTALL_DIR/lib/poems"
  make -f Makefile.g++
  cd "$MAALI_INSTALL_DIR/lib/meam"
  make -f Makefile.gfortran
    
# update packges
   cd "$MAALI_INSTALL_DIR/src"	
#   maali_run "make yes-standard"
   maali_run "make no-kim"
   maali_run "make no-kokkos"
   maali_run "make no-gpu"
   maali_run "make no-voronoi"
   maali_run "make package-status"
# compile final version
   maali_run "make -j $MAALI_CORES nectar"

}

##############################################################################
