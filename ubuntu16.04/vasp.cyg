##############################################################################
# maali cygnet file for VASP
##############################################################################

# specify which compilers we want to build the tool with
MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_COMPILERS"

# URL to download the source code from
MAALI_URL=""

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/$MAALI_TOOL_NAME.$MAALI_TOOL_VERSION.tar.gz"

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/$MAALI_TOOL_NAME.$MAALI_TOOL_VERSION"

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="apps"

# tool pre-requisites
MAALI_TOOL_PREREQ="fftw/3.3.5 lapack/3.6.1"

# for auto-building module files
MAALI_MODULE_SET_PATH=1

# restrict the module to a specified group
MAALI_MODULE_RESTRICT_GROUP='vasp'

##############################################################################

function maali_build {

  $makefile=makefile.linux_gfortran

  # Unload for Intel MKL
  if [ "$MAALI_COMPILER_NAME" == "intel" ]; then
    maali_run "module unload cray-libsci"
  fi

  cd "$MAALI_TOOL_BUILD_DIR"
  pwd
#  maali_run "mkdir -p $MAALI_INSTALL_DIR/bin"

  if [ "$MAALI_COMPILER_NAME" == "intel" ]; then
    export FFLAGS='-Os -FI'
  elif [ "$MAALI_COMPILER_NAME" == "gcc" ]; then
    cp arch/makefile.include.linux_gfortran makefile.include
    sed -i -e 's/IFC91_ompi/Nectar/g' makefile.include
    sed -i -e 's/\/data1\/gf01\/libs\//\/usr\/lib/g' makefile.include
    sed -i -e 's/\-lrefblas/\-latlas \-lf77blas \-lcblas/g' makefile.include
    sed -i -e 's/\/data1\/gf01\/fftw\-3.3.4\/lib\/libfftw3.a/\$\{FFTW\_LIB\}\/libfftw3.a/g' makefile.include
    sed -i -e 's/\/data1\/gf01\/fftw-3.3.4\/include/\-I\$\{FFTW\_INCLUDE\}/g' makefile.include 

    export FFLAGS='-O1'
    sed -i -e 's/\-ffree\-form \-ffree\-line\-length\-none/\-ffree\-form \-ffree\-line\-length\-none \-FR \-lowercase/g' makefile.include
#    export NOFREE='-ffixed-form'
  fi
  pwd
  maali_run "make "

#  cd ..
  cd "$MAALI_TOOL_BUILD_DIR"
  # Fix buggy file.  5.3.2
#  sed -i -e '/INTEGER IP, LMBASE, ISPIRAL, ISPINOR, NLIIND, NIS, NT, LMMAXC, NI, INDMAX, L, IND/ s/L, IND/L, LM, IND/' nonlr.F

  # Fix buggy file.  5.3.3
#  sed -i -e '/do_dbg/ s/3I)/3I5)/' spinsym.F
#  sed -i -e "/'Hf','Ta','W'/ s/W/W /" vdwforcefield.F
#  sed -i -e '/WRITE (APP  , / s/I)/I5)/' finite_diff.F
#  sed -i -e '/write(7,/ s/(I,/(I5,/' fcidump.F

  if [ "$MAALI_COMPILER_NAME" == "gcc" ]; then
    sed -i -e '/USE us/ s/USE us/USE us, only : setdij_, augmentation_charge/' us.F
  fi

  # Compile VASP...

  ##################################################

  export FC='mpif90'
  # -heap-arrays used to be needed to stop runing out of memory.

  if [ "$MAALI_COMPILER_NAME" == "intel" ]; then
    export FFLAGS='-FR -names lowercase -assume byterecl -align array32byte -align dcommons -align rec32byte '

    export OFLAG='-O2 -ip'
    export OFLAG_HIGH='-O3 -ip'
    export CPP_='./preprocess <$*.F | /usr/bin/cpp -P -C -traditional >$*$(SUFFIX)'
    export CPP_PAWSEY='$(CPP_) -DMPI -DHOST=\"Magnus\" -DIFC -DCACHE_SIZE=4000 -DPGF90 -Davoidalloc -Dkind8 -DMPI_BLOCK=64000 -Duse_collective -DscaLAPACK -Ddo_loops -Drandom_array -DnoSTOPCAR -DLONGCHAR '

    # Intel MKL
    export FFTW_INC='$(MKLROOT)/include/fftw'
    export BLAS='-mkl=sequential'
    export LAPACK=''
    export SCALAPACK='-lmkl_scalapack_lp64 -lmkl_blacs_intelmpi_lp64'

# radial.F needs to be compiled with low optimisation with Intel 14.
# nonl.F does not like -fno-alias with Intel 14.
cat <<EOF >> $makefile

radial.o : radial.F
	\$(CPP)
	\$(FC) \$(FFLAGS) -O1 -prec-div -c \$*\$(SUFFIX)

nonl.o : nonl.F
	\$(CPP)
	\$(FC) \$(FFLAGS) -O2 -ip -unroll-aggressive -opt-prefetch -use-intel-optimized-headers -no-prec-div -c \$*\$(SUFFIX)

EOF
  elif [ "$MAALI_COMPILER_NAME" == "gcc" ]; then
    export FFLAGS='-ffree-line-length-none -fno-second-underscore -FR -lowercase'
    export CPP_='./preprocess <$*.F | /usr/bin/cpp -P -C -traditional >$*$(SUFFIX)'
    export OFLAG='-O2'
    export FC='ftn -ffree-line-length-none'
    export CPP_PAWSEY='$(CPP_) -DMPI -DHOST=\"Nectar\" -DIFC -DCACHE_SIZE=4000 -Davoidalloc -Dkind8 -DMPI_BLOCK=64000 -Duse_collective -DscaLAPACK -Ddo_loops -Drandom_array -DnoSTOPCAR -DLONGCHAR '

    cp arch/makefile.include.linux_gfortran makefile.include
    # Cray libsci
#    export BLAS=''
#    export LAPACK=''
#    export SCALAPACK=''
  fi
  # End of compiler-specific options.
  ##################################################

  export LIB='-Lvasp.5.lib -ldmy vasp.5.lib/linpack_double.o -L$(FFTW_DIR) -lfftw3 $(SCALAPACK) $(LAPACK) $(BLAS)'
  export FFT3D='fftmpiw.o fftmpi_map.o  fftw3d.o  fft3dlib.o'
  export INCS='-I$(FFTW_INC)'

  ##################################################
  # Compile it with -DNGZhalf

  export CPP='$(CPP_PAWSEY) -DNGZhalf'

  maali_run "make veryclean"
  maali_run "make -e "
  maali_run "install -m 750 -g vasp vasp $MAALI_INSTALL_DIR/bin"

  ##################################################
  # Recompile it without -DNGZhalf

  export CPP='$(CPP_PAWSEY)'

  maali_run "make veryclean"
  maali_run "make -e "
  maali_run "install -m 750 -g vasp vasp $MAALI_INSTALL_DIR/bin/vasp-nf1"

  ##################################################
  # Recompile it with -DTBDYN

  export CPP='$(CPP_PAWSEY) -DTBDYN -DNGZhalf'

  maali_run "make veryclean"
  maali_run "make -e "
  maali_run "install -m 750 -g vasp vasp $MAALI_INSTALL_DIR/bin/vasp-tbdyn"

  ##################################################
  # With VTST
  cp -p chain.F chain.F.orig
  cp -p main.F main.F.orig

  wget http://theory.cm.utexas.edu/code/vtstcode.tgz
  wget http://theory.cm.utexas.edu/code/vtstscripts.tgz
  cp $makefile $makefile.vtst
  tar xz --strip-components=1 -f vtstcode.tgz
  sed -i -e 's/chain.o/bfgs.o dynmat.o  instanton.o  lbfgs.o sd.o   cg.o dimer.o bbm.o \\\n         fire.o lanczos.o neb.o  qm.o opt.o\\\n         chain.o/' $makefile.vtst
  #clobber the newline with perl
  perl -pi -e 's/(CALL CHAIN_FORCE[(]T_INFO%NIONS,DYN%POSION,TOTEN,TIFOR, &\n)/$1        TSIF,LATT_CUR%A,LATT_CUR%B,IO%IU6) !/m' main.F

  sed -i -e 's/<NBAS>I5/10I5/' bbm.F
  sed -i -e 's/MP2_bandstructure==.FALSE./.NOT. MP2_bandstructure/' ump2.F

  export CPP='$(CPP_PAWSEY) -DNGZhalf'

  maali_run "make -f $makefile.vtst veryclean"
  maali_run "make -e -f $makefile.vtst"
  maali_run "install -m 750 -g vasp vasp $MAALI_INSTALL_DIR/bin/vasp-tst"

  ##################################################
  # Still with VTST

  export CPP='$(CPP_PAWSEY) -DNGZhalf -DwNGZhalf'

  maali_run "make -f $makefile.vtst clean"
  maali_run "make -e -f $makefile.vtst"
  maali_run "install -m 750 -g vasp vasp $MAALI_INSTALL_DIR/bin/vasp-tst-gamma"

  ##################################################
  # Still with VTST
  # With xy relaxation
  cp -p constr_cell_relax.F constr_cell_relax.F.orig

patch -p0  <<EOF
--- constr_cell_relax.F.orig 2015-03-11 15:15:52.924891000 +0800
+++ constr_cell_relax.F  2015-03-11 15:26:49.708553000 +0800
@@ -34,6 +34,23 @@
 !      FCELL=0   ! F90 style: set the whole array to zero
 !      FCELL(1,1)=SAVE

+!     relaxation in xy plane only
+      FCELL(1,3)=0
+      FCELL(2,3)=0
+      FCELL(3,3)=0
+      FCELL(3,1)=0
+      FCELL(3,2)=0
+!     or use this
+!     SAVE1=FCELL(1,1)
+!     SAVE2=FCELL(1,2)
+!     SAVE3=FCELL(2,1)
+!     SAVE4=FCELL(2,2)
+!     FCELL=0
+!     FCELL(1,1)=SAVE1
+!     FCELL(1,2)=SAVE2
+!     FCELL(2,1)=SAVE3
+!     FCELL(2,2)=SAVE4
+
       RETURN
       END SUBROUTINE
EOF

  export CPP='$(CPP_PAWSEY) -DNGZhalf'

  maali_run "make -f $makefile.vtst veryclean"
  maali_run "make -e -f $makefile.vtst"
  maali_run "install -m 750 -g vasp vasp $MAALI_INSTALL_DIR/bin/vasp-tst-xy"

  ##################################################
  # if this is a system build we need to restrict it to the appropriate group
  if [ "$MAALI_SYSTEM_BUILD" == "YES" ]; then
    maali_run "chmod 750 $MAALI_INSTALL_DIR"
    maali_run "chgrp $MAALI_MODULE_RESTRICT_GROUP $MAALI_INSTALL_DIR"

    maali_run "chmod 750 $MAALI_INSTALL_DIR/bin"
    maali_run "chgrp -R $MAALI_MODULE_RESTRICT_GROUP $MAALI_INSTALL_DIR/bin"
  fi

}

##############################################################################
